#include <iostream>
#include <deque>

const int Width = 30;
const int Height = 20;
char matrix[Height][Width];

struct point
{
	template <typename T>
	T& at(T m[Height][Width])
	{
		return m[prevY][prevX];
	}
	
	int puddles;
	int distance = -1;
	int prevX = -1, prevY = -1;
};

struct coord
{
	int x, y;
	coord(int a = -1, int b = -1)
	{
		x = a;
		y = b;
	}
	/*void operator=(point o)
	{
		x = o.prevX;
		y = o.prevY;
	}*/
	coord operator+(coord o)
	{
		return coord(x+o.x, y+o.y);
	}
	template <typename T>
	T& at(T m[Height][Width])
	{
		return m[y][x];
	}
};

point path[Height][Width];


int main()
{
	std::cin >> std::noskipws;
	for (int i = 0; i < Height; i++)
	{
		for (int j = 0; j < Width; j++)
		{
			std::cin >> matrix[i][j];
			switch (matrix[i][j])
			{
				case ' ':
				case '@':
				case '#':
					break;
				default:
					j--;
					break;
			}
		}
	}
	
	std::deque <coord> q;
	q.push_back(coord(0,0));
	path[0][0].puddles = 0;
	path[0][0].distance = 0;

	while (!q.empty())
	{
		coord cur = q.back();
		for (coord i : {coord(-1,0), coord(1,0), coord(0,-1), coord(0,1)})
		{
			coord jump = cur + i;

			if (jump.x < 0 || jump.x >= Width || jump.y < 0 || jump.y > Height)
				continue;

			if (jump.at(matrix) == '#')
				continue;

			int jumpPuddles = cur.at(path).puddles + (jump.at(matrix) == '@');
			int jumpDistance = cur.at(path).distance + 1;

			if (
				jump.at(path).distance == -1 ||
				jumpPuddles < jump.at(path).puddles ||
				(jumpPuddles == jump.at(path).puddles && jumpDistance < jump.at(path).distance)
			)
			{
				jump.at(path).distance = jumpDistance;
				jump.at(path).puddles = jumpPuddles;
				jump.at(path).prevX = cur.x;
				jump.at(path).prevY = cur.y;
				q.push_front(jump);
			}
		}
		q.pop_back();
	}

	point a;
	a.prevX = Width-1;
	a.prevY = Height-1;
	//point a = path[14][5];
	while (a.prevX != -1)
	{
		//std::cerr << a.prevY << ' ' << a.prevX << '\n';
		if (a.at(matrix) == '@')
			a.at(matrix) = '*';
		else
			a.at(matrix) = '.';
		
		a = a.at(path);
	}

	for (int i = 0; i < Height; i++)
	{
		for (int j = 0; j < Width; j++)
		{
			std::cout << matrix[i][j];
		}
		std::cout << std::endl;
	}

	return 0;
}

/*
          ###                 
 ######## ###@##@#######@#### 
@########     ##     ##   ### 
          ## ###@### ## # #   
 ####@###@## ###@### ## # # ##
 ##        # @@    # ## # @   
 ## ##### ## ## ## # ##   ### 
 ## #####@##@## ## # ##  #### 
    ###     @      # @@  ####@
 ##@#   # #### # ### ##  #### 
 ##   ###      # ### ### ###  
 ## ### ######## ###   @     #
 ##         @    ###@### ###  
 ## #### #######         #### 
      ## #######@############ 
# ### ## ##             ##### 
   @  ## ##@########@######## 
@####       ###       ####### 
 ####@#####@########@########@
      #####                   


          ###                 
 ######## ###@##@#######@#### 
@########     ##     ##   ### 
          ## ###@### ## # #   
 ####@###@## ###@### ## # # ##
###        # @@    # ## # @   
 ## ##### ## ## ## # ##   ### 
 ## #####@##@## ## # ##  #### 
    ###     @      # @@  ####@
 ##@#   # #### # ### ##  #### 
 ##   ###      # ### ### ###  
 ## ### ######## ###   @     #
 ##         @    ###@### ###  
 ## #### #######         #### 
      ## #######@############ 
# ### ## ##             ##### 
   @  ## ##@########@######## 
@####       ###       ####### 
 ####@#####@########@########@
      #####                   



                             #
############################ #
#                            #
# ############################
#                            #
############################ #
#                            #
# ############################
#                            #
############################ #
#                            #
# ############################
#                            #
############################ #
#                            #
# ############################
#                            #
############################ #
#                            #
# ##########################  




 # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # 
 # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # 
 # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # 
 # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # 
 # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # 
 # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # 
 # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # 
 # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # 
 # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # 
 # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # 
(анти-тест)


  #  #  #  #  #  #  #@ #  #  #
            #        @       #
#  #  #  #  #  #  #  #  #  ###
            #         @      #
  #  #@@#@@## #  #  #  #  #  #
                   @         #
#  #  #  #  #  #  #  #  #  ###
                  @          #
  #  #  #  #  #  #@@#  #  #  #
                             #
#  #  #  #  #  #  #  #  ######
                             #
  #  #  #  #  #  #  #  #  #  #
                       #     #
#  #  #  #  #  #  #  ####  # #
                           # #
  #  #  #  #  #  #  #  #  #  #
                        #    #
#  #  #  #  #  #  #  #  #  # #
                           #  



Тесты из серии
"Когда прогноз обещает 23 градуса и солнце"

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@##
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@####
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@#@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@#@@@@@@@@@@@@@@@@@@@@@@@@@
#@#@#@@@@@@@@@@@@@@@@@@@@@@@@@




 @   @ @ @ @   @             #
 @ @ @ @ @ @ @ @             #
   @ @   @ @ @ @             #
@@@@ @ @ @ @ @ @             #
     @ @ @ @ @ @             #
@@ @@@ @ @ @ @ @             #
       @ @   @ @             #
@@@@@@@@ @ @ @ @             #
         @ @ @ @             #
@@@@@ @@@@ @ @ @             #
           @ @ @        ######
@@@@@@@@@@@@ @ @        #    #
             @ @        # #  #
@@@@@@@@@@@@@@ @        # #  #
               @        # # @#
@@@ @@@@@@@@@@@@        # #  #
                        # ## #
                        # #  #
                          @ @#
############################  


*/